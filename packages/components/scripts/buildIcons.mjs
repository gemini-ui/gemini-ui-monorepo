import { execSync } from "child_process";
import { readFileSync, readdirSync, writeFileSync, mkdirSync } from "fs";
import { optimize } from "svgo";
import { kebabCase, pascalCase } from "change-case";

// Check if submodules are initialized
const status = execSync("git submodule status").toString("utf8");

// If not, initialize them
if (status[0] === "-") {
  execSync("git submodule update --init");
}

// Icon template
const template = readFileSync("src/icons/__Icon.astro", "utf8");
function renderIcon(name, svg) {
  return template
    .replaceAll("{{ icon_name }}", kebabCase(name))
    .replaceAll("{{ icon_svg }}", svg);
}

// Generate icons
const iconsPath = "iconoir/icons";
const outputPath = "src/icons";
function generateIcons(kind) {
  const icons = readdirSync(`${iconsPath}/${kind}`);
  mkdirSync(`${outputPath}/${kind}`, { recursive: true });

  let indexSource = "";

  for (const icon of icons) {
    const name = icon.replace(/\.svg$/, `-${kind}`);
    const path = `${iconsPath}/${kind}/${icon}`;
    const svgSource = readFileSync(path, "utf8");

    const optimizedSvg = optimize(svgSource, {
      multipass: true,
    });

    const iconAstro = renderIcon(name, optimizedSvg.data);
    const iconPath = `${outputPath}/${kind}/${pascalCase(name)}.astro`;
    writeFileSync(iconPath, iconAstro);

    indexSource += `export { default as ${pascalCase(
      name,
    )} } from "./${kind}/${pascalCase(name)}.astro";\n`;
  }

  return indexSource;
}

const indexSource = `// Autogenerated file. Do not edit.
${generateIcons("regular")}
${generateIcons("solid")}
`;

writeFileSync(`${outputPath}/index.ts`, indexSource);
