import { execSync } from "child_process";
import { readFileSync, readdirSync, writeFileSync, mkdirSync } from "fs";
import { optimize } from "svgo";
import { kebabCase, pascalCase } from "change-case";

// Check if submodules are initialized
const status = execSync("git submodule status").toString("utf8");

// If not, initialize them
if (status[0] === "-") {
  execSync("git submodule update --init");
}

// Icon template
const template = readFileSync("src/icons/__Icon.astro", "utf8");
function renderIcon(name, svg) {
  return template
    .replaceAll("{{ icon_name }}", kebabCase(name))
    .replaceAll("{{ icon_svg }}", svg);
}

// Generate icons
const iconsPath = "iconoir/icons";
const outputPath = "src/icons";
function generateIcons(kind) {
  const icons = readdirSync(`${iconsPath}/${kind}`);

  const generatedIcons = [];

  for (const icon of icons) {
    const name = icon.replace(/\.svg$/, `-${kind}`);
    const path = `${iconsPath}/${kind}/${icon}`;
    const svgSource = readFileSync(path, "utf8");

    const optimizedSvg = optimize(svgSource, {
      multipass: true,
    });

    mkdirSync(`${outputPath}/${kind}/${pascalCase(name)}`, { recursive: true });

    const iconAstro = renderIcon(name, optimizedSvg.data);
    const iconPath = `${outputPath}/${kind}/${pascalCase(name)}/${pascalCase(
      name,
    )}.astro`;
    writeFileSync(iconPath, iconAstro);

    const iconAstroTs = `export { default } from "./${pascalCase(
      name,
    )}.astro";\nexport * from "./${pascalCase(name)}.astro";\n`;
    const iconPathTs = `${outputPath}/${kind}/${pascalCase(name)}/index.ts`;
    writeFileSync(iconPathTs, iconAstroTs);

    generatedIcons.push({
      kind,
      name,
    });
  }

  return generatedIcons;
}

const regularIcons = generateIcons("regular");
const solidIcons = generateIcons("solid");

// Generate index.ts
const indexSource = `// Autogenerated file. Do not edit.
${regularIcons
  .map(
    ({ kind, name }) =>
      `export { default as ${pascalCase(name)} } from "./${kind}/${pascalCase(
        name,
      )}/${pascalCase(name)}.astro";`,
  )
  .join("\n")}
${solidIcons
  .map(
    ({ kind, name }) =>
      `export { default as ${pascalCase(name)} } from "./${kind}/${pascalCase(
        name,
      )}/${pascalCase(name)}.astro";`,
  )
  .join("\n")}
`;

writeFileSync(`${outputPath}/index.ts`, indexSource);

// Update package.json
const packageJson = JSON.parse(readFileSync("package.json", "utf8"));

for (const icon of [...regularIcons, ...solidIcons]) {
  packageJson.exports[`./icons/${icon.kind}/${pascalCase(icon.name)}`] =
    `./src/icons/${icon.kind}/${pascalCase(icon.name)}/index.ts`;
}

writeFileSync("package.json", JSON.stringify(packageJson, null, 2) + "\n");
