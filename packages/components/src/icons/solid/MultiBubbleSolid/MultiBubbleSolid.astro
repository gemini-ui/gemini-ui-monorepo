---
import { getSizeProp, type OptionalSizeProp } from "@gemini-ui-astro/core";

export interface Props extends astroHTML.JSX.HTMLAttributes {
  size?: OptionalSizeProp;
}

const { class: className, size, ...rest } = Astro.props;
---

<i {...rest} class="gx-icon gx-icon-multi-bubble-solid"></i>

<style
  lang="scss"
  define:vars={{
    "gx-size": size ? getSizeProp(size) : "inherit",
  }}
>
  .gx-icon-multi-bubble-solid::before{mask-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"><path fill="currentColor" fill-rule="evenodd" d="M1.25 16.5a6.25 6.25 0 1 1 3.374 5.55l-2.212.412a.75.75 0 0 1-.874-.874l.412-2.212a6.2 6.2 0 0 1-.7-2.876" clip-rule="evenodd"/><path fill="currentColor" fill-rule="evenodd" d="M22.75 10A8.75 8.75 0 0 0 14 1.25c-4.266 0-8.098 3.25-8.662 7.509l-.002.004v-.008.008l-.006.063-.02.238a7.75 7.75 0 0 1 9.628 9.622 10 10 0 0 0 .38-.037l.047-.006.014-.001.004-.001h.002l.017-.003a8.7 8.7 0 0 0 2.726-.922l3.335.621a.75.75 0 0 0 .874-.874l-.62-3.335A8.7 8.7 0 0 0 22.75 10" clip-rule="evenodd"/></svg>');}

  .gx-icon {
    display: inline-block;
    font-size: var(--gx-size);

    &::before {
      content: " ";
      display: block;
      background: currentColor;
      mask-size: cover;
      -webkit-mask-size: cover;
      width: 1em;
      height: 1em;
    }
  }
</style>
