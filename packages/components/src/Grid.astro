---
import type { NumberOrString, OptionalSizeProp } from "@gemini-ui-astro/core";
import { classMerge, getSizeProp } from "@gemini-ui-astro/core";

export interface Props extends astroHTML.JSX.ButtonHTMLAttributes {
  container?: boolean;
  gap?: OptionalSizeProp;
  columnGap?: OptionalSizeProp;
  rowGap?: OptionalSizeProp;
  xs?:
    | NumberOrString<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12>
    | "auto";
  sm?:
    | NumberOrString<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12>
    | "auto";
  md?:
    | NumberOrString<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12>
    | "auto";
  lg?:
    | NumberOrString<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12>
    | "auto";
  verticalAlign?: "flex-start" | "center" | "flex-end";
  horizontalAlign?: "left" | "center" | "right";
  class?: string;
}

const {
  container,
  gap,
  columnGap,
  rowGap,
  xs,
  sm,
  md,
  lg,
  verticalAlign,
  horizontalAlign,
  class: className,
  ...props
} = Astro.props;
const containerClass = container ? "gx-container" : "gx-grid-item";
const xsClass = xs && `gx-col-xs-${xs}`;
const smClass = sm && `gx-col-sm-${sm}`;
const mdClass = md && `gx-col-md-${md}`;
const lgClass = lg && `gx-col-lg-${lg}`;

const classList = classMerge(
  "gx-grid",
  className,
  containerClass,
  xsClass,
  smClass,
  mdClass,
  lgClass,
);
---

<div {...props} class={classList}>
  <slot />
</div>

<style
  lang="scss"
  define:vars={{
    "gx-column-gap": container ? gap || columnGap : null,
    "gx-row-gap": container ? gap || columnGap : null,
    "gx-horizontal-align": horizontalAlign || "left",
    "gx-vertical-align": verticalAlign || "flex-start",
  }}
>
  .gx-grid-item {
    display: flex;
    flex-direction: column;
    align-items: var(--gx-horizontal-align);
    justify-content: var(--gx-vertical-align);
  }

  .gx-container {
    display: flex;
    flex-direction: row;
    position: relative;
    flex-wrap: wrap;
    margin: calc(var(--gx-row-gap) / -2) calc(var(--gx-column-gap) / -2);

    .gx-container {
      padding-left: 0;
      padding-right: 0;
    }

    .gx-grid-item {
      padding: calc(var(--gx-row-gap) / 2) calc(var(--gx-column-gap) / 2);
    }
  }

  .verticalAlign {
    display: flex;
    justify-content: center;
    flex-direction: column;
  }

  .gx-col-xs-auto {
    flex: 1 1 0px;
  }

  @for $i from 1 through 12 {
    .gx-col-xs-#{$i} {
      flex: 0 0 calc((100% / 12) * #{$i});
      max-width: calc((100% / 12) * #{$i});
    }
  }

  @media (min-width: 768px) {
    .gx-col-sm-auto {
      flex: 1 1 0px;
    }

    @for $i from 1 through 12 {
      .gx-col-sm-#{$i} {
        flex: 0 0 calc((100% / 12) * #{$i});
        max-width: calc((100% / 12) * #{$i});
      }
    }
  }

  @media (min-width: 1024px) {
    .gx-col-md-auto {
      flex: 1 1 0px;
    }

    @for $i from 1 through 12 {
      .gx-col-md-#{$i} {
        flex: 0 0 calc((100% / 12) * #{$i});
        max-width: calc((100% / 12) * #{$i});
      }
    }
  }

  @media (min-width: 1440px) {
    .gx-col-lg-auto {
      flex: 1 1 0px;
    }

    @for $i from 1 through 12 {
      .gx-col-lg-#{$i} {
        flex: 0 0 calc((100% / 12) * #{$i});
        max-width: calc((100% / 12) * #{$i});
      }
    }
  }
</style>
